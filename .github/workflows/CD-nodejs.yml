
name: CD_nodejs

on:
  workflow_dispatch:

env:
  NODE_VERSION: '14.x'
  GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_ORG_KEY: ${{ secrets.SONAR_ORG_KEY }}
  SN_DEVOPS_USER: ${{ secrets.SN_DEVOPS_USER }}
  SN_DEVOPS_PASSWORD: ${{ secrets.SN_DEVOPS_PASSWORD }}
  SN_INSTANCE_URL: ${{ secrets.SN_INSTANCE_URL }}
  SN_ORCHESTRATION_TOOL_ID: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
  
permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: npm install, build, and test
        run: |
             npm install
             npm run clean
             npm run build --if-present
             npm run test --if-present && npm run junitxml
        
      - name: Zip artifact for deployment
        run: zip release.zip ./* -r
    
      - name: ServiceNow DevOps Unit Test Results
        uses: ServiceNow/servicenow-devops-test-report@v1.34.2
        with:
          devops-integration-user-name: ${{ env.SN_DEVOPS_USER }}
          devops-integration-user-password: ${{ env.SN_DEVOPS_PASSWORD }}
          instance-url: ${{ env.SN_INSTANCE_URL }}
          tool-id: ${{ env.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Build'
          xml-report-filename: 'reports/'
    
  runSonarQube:
    name: 'Run SonarQube' 
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
        
    - name: sonarqube-scanner install.
      run: npm install -g sonarqube-scanner
        
    - name: SonarCloud Scan
      run: sonar-scanner -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} -Dsonar.organization=${{ env.SONAR_ORG_KEY }} -Dsonar.host.url=${{ env.SONAR_HOST_URL }} -Dsonar.login=${{ env.SONAR_TOKEN }} -Dsonar.branch.name=master
      
    - name: Store Scan Tests Results
      shell: bash
      run : echo "Store Scan Tests Results in ServiceNow"
      
    - name: ServiceNow DevOps Sonar Scan Results
      uses: ServiceNow/servicenow-devops-sonar@v1.34.2
      with:
          devops-integration-user-name: ${{ env.SN_DEVOPS_USER }}
          devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          job-name: 'Run SonarQube'
          context-github: ${{ toJSON(github) }}
          sonar-host-url: ${{ secrets.SONAR_HOST_URL }}
          sonar-project-key: ${{ secrets.SONAR_PROJECT_KEY }}
 
 
  registerArtifact:
    name: 'Register Artifact'
    runs-on: ubuntu-latest
    needs: runSonarQube
    steps:
    - name: Register Artifact
      shell: bash
      run : echo "Register Artifact to ServiceNow"
        
    - name: ServiceNow Register Artifact
      uses: ServiceNow/servicenow-devops-register-artifact@v1.34.2
      with:
        devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
        devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
        instance-url: ${{ secrets.SN_INSTANCE_URL }}
        tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
        context-github: ${{ toJSON(github) }}
        job-name:  'Register Artifact'
        artifacts: '[{"name": "com:release.zip","version": "1.${{ github.run_number }}.0","semanticVersion": "1.${{ github.run_number }}.0","repositoryName": "${{ github.repository }}"}]'
          
 
  registerPackage:
    name: 'Register Package'
    runs-on: ubuntu-latest
    needs: registerArtifact
    steps:
    - name: Register Package to ServiceNow
      shell: bash
      run : echo "Register Package to ServiceNow"
      
    - name: ServiceNow Register Package
      uses: ServiceNow/servicenow-devops-register-package@v1.34.2
      with:
        devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
        devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
        instance-url: ${{ secrets.SN_INSTANCE_URL }}
        tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
        context-github: ${{ toJSON(github) }}
        job-name: 'Register Package'
        artifacts: '[{"name": "com:release.zip","version": "1.${{ github.run_number }}.0","semanticVersion": "1.${{ github.run_number }}.0","repositoryName": "${{ github.repository }}"}]'
        package-name: 'release-all-${{ github.run_number }}.zip'


  approveChangeRequest:
    name: 'Approve Change Request'
    runs-on: ubuntu-latest
    needs: registerPackage
    steps:
    - name: Approve Change Request in ServiceNow
      shell: bash
      run : echo "Approve Change Request in ServiceNow"
      
    - name: ServiceNow Change
      uses: ServiceNow/servicenow-devops-change@v1.34.2
      with:
        devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
        devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
        instance-url: ${{ secrets.SN_INSTANCE_URL }}
        tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
        context-github: ${{ toJSON(github) }}
        job-name: 'Approve Change Request'
        change-request: '{"setCloseCode":"false","attributes":{"short_description":"Application deployment for samples-dev","description":"Automated Software Deployment.","assignment_group":"a715cd759f2002002920bde8132e7018","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}}'
        interval: '100'
        timeout: '3600'
